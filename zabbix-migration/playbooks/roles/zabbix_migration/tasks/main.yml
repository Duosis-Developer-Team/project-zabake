---
- name: Resolve CSV absolute path
  set_fact:
    zbx_csv_path_resolved: "{{ (zbx_migration_csv if zbx_migration_csv.startswith('/') else (playbook_dir | default(ansible_playbook_directory) + '/' + zbx_migration_csv)) }}"

- name: Stat CSV on controller
  stat:
    path: "{{ zbx_csv_path_resolved }}"
  register: zbx_csv_ctrl_stat
  delegate_to: localhost
  run_once: true

- name: Slurp CSV from controller when exists
  when: zbx_csv_ctrl_stat.stat.exists
  slurp:
    path: "{{ zbx_csv_path_resolved }}"
  register: zbx_csv_slurp_ctrl
  delegate_to: localhost
  run_once: true

- name: Set CSV lines from controller
  when: zbx_csv_ctrl_stat.stat.exists
  set_fact:
    zbx_csv_lines: "{{ (zbx_csv_slurp_ctrl.content | b64decode).splitlines() }}"

- name: Slurp CSV from remote host when not on controller
  when: not zbx_csv_ctrl_stat.stat.exists
  slurp:
    path: "{{ zbx_csv_path_resolved }}"
  register: zbx_csv_slurp_remote

- name: Set CSV lines from remote
  when: not zbx_csv_ctrl_stat.stat.exists
  set_fact:
    zbx_csv_lines: "{{ (zbx_csv_slurp_remote.content | b64decode).splitlines() }}"

- name: Parse CSV header
  set_fact:
    zbx_csv_header: "{{ zbx_csv_lines[0].split(',') | map('trim') | list }}"

- name: Prepare value list for current line
  vars:
    _vals: "{{ item.split(',', zbx_csv_header|length - 1) | map('trim') | list }}"
    _rec_yaml: |-
      {% for i in range(zbx_csv_header|length) %}
      {{ zbx_csv_header[i] }}: {{ (_vals[i] | default('') | to_json) }}
      {% endfor %}
  set_fact:
    zbx_records: "{{ zbx_records | default([]) + [ (_rec_yaml | from_yaml) ] }}"
  loop: "{{ zbx_csv_lines[1:] }}"

- name: Zabbix login to obtain auth token (if not provided)
  when: zabbix_auth | length == 0
  uri:
    url: "{{ zabbix_url }}"
    method: POST
    body_format: json
    validate_certs: "{{ zabbix_validate_certs }}"
    body:
      jsonrpc: "2.0"
      method: "user.login"
      params:
        username: "{{ zabbix_user }}"
        password: "{{ zabbix_password }}"
      id: 0
  register: zbx_login_resp

- name: Set zabbix_auth from login
  when: zabbix_auth | length == 0
  set_fact:
    zabbix_auth: "{{ zbx_login_resp.json.result }}"

- name: Include per-record tasks
  include_tasks: per_record.yml
  loop: "{{ zbx_records }}"
  loop_control:
    loop_var: zbx_record


