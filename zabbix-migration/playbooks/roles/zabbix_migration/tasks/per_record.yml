---
- name: Load mappings
  vars:
    _tpl_map_path: "{{ playbook_dir | default(ansible_playbook_directory) }}/../mappings/templates.yml"
    _type_map_path: "{{ playbook_dir | default(ansible_playbook_directory) }}/../mappings/template_types.yml"
    _dc_map_path: "{{ playbook_dir | default(ansible_playbook_directory) }}/../mappings/datacenters.yml"
  set_fact:
    zbx_tpl_map: "{{ lookup('file', _tpl_map_path) | from_yaml }}"
    zbx_type_map: "{{ lookup('file', _type_map_path) | from_yaml }}"
    zbx_dc_map: "{{ lookup('file', _dc_map_path) | from_yaml }}"

- name: Parse macros field
  vars:
    macros_raw: "{{ zbx_record.MACROS | default('') }}"
    macros_json_like: "{{ macros_raw | regex_replace('^\\s*$','{}') | regex_replace('^{\\s*','{') | regex_replace('\\s*}$','}') }}"
  set_fact:
    zbx_macros: >-
      {{ (macros_json_like | from_yaml) if macros_json_like is match('^\\{') else {} }}

- name: Resolve templates for device type
  set_fact:
    zbx_templates: "{{ zbx_tpl_map.get(zbx_record.DEVICE_TYPE, []) }}"

- name: Extract template names and types
  set_fact:
    zbx_template_names: "{{ zbx_templates | map(attribute='name') | list }}"
    zbx_template_types: "{{ zbx_templates | map(attribute='type') | list | unique }}"

- name: Fail if no templates found for device type
  when: zbx_template_names | length == 0
  fail:
    msg: "No templates mapped for DEVICE_TYPE='{{ zbx_record.DEVICE_TYPE }}'"

- name: Determine interface type from templates
  set_fact:
    zbx_iface_type: "{{ zbx_template_types[0] }}"

- name: Warn if multiple differing interface types found
  when: zbx_template_types | length > 1
  debug:
    msg: "Multiple template types found {{ zbx_template_types }}; using '{{ zbx_iface_type }}'"

- name: Resolve interface spec
  set_fact:
    zbx_iface: "{{ zbx_type_map.get(zbx_iface_type, {}).get('interface') }}"

- name: Resolve DC proxy
  set_fact:
    zbx_dc: "{{ zbx_dc_map.get(zbx_record.DC_ID, {}) }}"

- name: Resolve template IDs by name
  vars:
    _tpl_get_body: |
      {
        "jsonrpc": "2.0",
        "method": "template.get",
        "params": {"output": ["templateid","name"], "filter": {"name": %s}},
        "auth": "%s",
        "id": 1001
      }
  uri:
    url: "{{ zabbix_url }}"
    method: POST
    body_format: json
    validate_certs: false
    body: "{{ _tpl_get_body | format(zbx_template_names | to_json, zabbix_auth) | from_json }}"
  register: zbx_tpl_get_resp

- name: Build template id list
  set_fact:
    zbx_template_id_list: "{{ zbx_tpl_get_resp.json.result | map(attribute='templateid') | map('regex_replace','^(.*)$','{"templateid":"\\1"}') | map('from_yaml') | list }}"

- name: Create or update host via Zabbix API
  uri:
    url: "{{ zabbix_url }}"
    method: POST
    body_format: json
    validate_certs: false
    body:
      jsonrpc: "2.0"
      method: "host.create"
      params:
        host: "{{ zbx_record.HOSTNAME }}"
        name: "{{ zbx_record.HOSTNAME }}"
        interfaces: >-
          {{ [ {
            'type': zbx_iface.type,
            'main': 1,
            'useip': 1,
            'ip': zbx_record.HOST_IP,
            'dns': zbx_iface.dns | default(''),
            'port': (zbx_iface.port | default(161)) | string,
            'details': zbx_iface.details | default(omit)
          } ] if zbx_iface is not none else [] }}
        templates: "{{ zbx_template_id_list }}"
        proxy_groupid: "{{ zbx_dc.proxy_groupid | default(omit) }}"
        proxyid: "{{ zbx_dc.proxyid | default(omit) }}"
      auth: "{{ zabbix_auth }}"
      id: 1
  register: zbx_create_resp
  failed_when: false

- name: If host exists, update instead
  when: zbx_create_resp.json.error is defined and zbx_create_resp.json.error.message is search('already exists')
  uri:
    url: "{{ zabbix_url }}"
    method: POST
    body_format: json
    validate_certs: false
    body:
      jsonrpc: "2.0"
      method: "host.update"
      params:
        host: "{{ zbx_record.HOSTNAME }}"
        name: "{{ zbx_record.HOSTNAME }}"
        interfaces: >-
          {{ [ {
            'type': zbx_iface.type,
            'main': 1,
            'useip': 1,
            'ip': zbx_record.HOST_IP,
            'dns': zbx_iface.dns | default(''),
            'port': (zbx_iface.port | default(161)) | string,
            'details': zbx_iface.details | default(omit)
          } ] if zbx_iface is not none else omit }}
        templates: "{{ zbx_template_id_list }}"
        proxy_groupid: "{{ zbx_dc.proxy_groupid | default(omit) }}"
        proxyid: "{{ zbx_dc.proxyid | default(omit) }}"
      auth: "{{ zabbix_auth }}"
      id: 2
  register: zbx_update_resp


